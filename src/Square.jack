// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/Square.jack

/**
 * Implements a graphic square. A graphic square has a screen location
 * and a size. It also has methods for drawing, erasing, moving on the 
 * screen, and changing its size.
 */
class Square {

    // Location on the screen
    field int x, y;

    // The size of the square
    field int temporaryWidth;
    field int width;
    field int height;

    /** Constructs a new square with a given location and size. */
    constructor Square new(int Ax, int Ay, int aWidth, int aHeight) {
        let x = Ax;
        let y = Ay;
        let temporaryWidth = aWidth;
        let width = aWidth;
        let height = aHeight;

        do draw();

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Draws the square on the screen. */
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + width, y + height);
        return;
    }

    /** Erases the square from the screen. */
    method void erase() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + width, y + height);
        return;
    }

    /** Moves up by 2 pixels. */
    method void moveUp() {
        if (y > 1) {
            do Screen.setColor(false);
            do Screen.drawRectangle(x, (y + height) - 1, x + width, y + height);
            let y = y - 2;
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + width, y + 1);
        }
        return;
    }

    /** Moves down by 2 pixels. */
    method void moveDown() {
        if ((y + height) < 254) {
            do Screen.setColor(false);
            do Screen.drawRectangle(x, y, x + width, y + 1);
            let y = y + 2;
            do Screen.setColor(true);
            do Screen.drawRectangle(x, (y + height) - 1, x + width, y + height);
        }
        return;
    }

    /** Moves left by 2 pixels. */
    method void moveLeft() {
        if (x > 1) {
            do Screen.setColor(false);
            do Screen.drawRectangle((x + width) - 1, y, x + width, y + height);
            let x = x - 2;
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + 1, y + height);
        }
        return;
    }

    /** Moves right by 2 pixels. */
    method void moveRight() {
        if ((x + width) < 510) {
            do Screen.setColor(false);
            do Screen.drawRectangle(x, y, x + 1, y + height);
            let x = x + 2;
            do Screen.setColor(true);
            do Screen.drawRectangle((x + width) - 1, y, x + width, y + height);
        }
        return;
    }

    method boolean isBottomOfScreen() {
        // Place shape on bottom of screen
        if ((y + height) < 254) {
            // Place shape on top of existing shape on screen
            if (Memory.peek(16384 + (32*(y+height+4)) + (x/16)) = 0) {
                return false;
            } else {
                return true;
            }
        } else {
            return true;
        }
    }

    method void flipOrientation() {
        do erase();
        let width = height;
        let height = temporaryWidth;
        let temporaryWidth = width;
        do draw();
        return;
    }
}
